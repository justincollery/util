AWSTemplateFormatVersion: '2010-09-09'
Description: 'Serverless Irish Utility Bill Processing System'

Parameters:
  EnvironmentName:
    Type: String
    Default: production
    Description: Environment name for resource naming

Resources:
  # S3 Bucket for storing utility bills
  UtilityBillsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'irish-utility-bills-${EnvironmentName}-${AWS::AccountId}'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  # S3 Bucket for static website assets
  StaticAssetsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'irish-utility-static-${EnvironmentName}-${AWS::AccountId}'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html

  # CloudFront Distribution
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        Comment: !Sub 'Irish Utility Compare - ${EnvironmentName}'
        DefaultRootObject: index.html
        Origins:
          - Id: StaticAssets
            DomainName: !GetAtt StaticAssetsBucket.DomainName
            S3OriginConfig:
              OriginAccessIdentity: ''
            OriginAccessControlId: !Ref CloudFrontOAC
          - Id: APIGateway
            DomainName: !Sub '${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com'
            CustomOriginConfig:
              HTTPPort: 443
              OriginProtocolPolicy: https-only
        DefaultCacheBehavior:
          TargetOriginId: APIGateway
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods: [GET, HEAD, OPTIONS, PUT, POST, PATCH, DELETE]
          CachedMethods: [GET, HEAD, OPTIONS]
          ForwardedValues:
            QueryString: true
            Headers: [Authorization, CloudFront-Forwarded-Proto]
        CacheBehaviors:
          - PathPattern: '/_next/static/*'
            TargetOriginId: StaticAssets
            ViewerProtocolPolicy: redirect-to-https
            AllowedMethods: [GET, HEAD]
            CachedMethods: [GET, HEAD]
            ForwardedValues:
              QueryString: false
            TTL:
              DefaultTTL: 86400
              MaxTTL: 31536000
          - PathPattern: '/static/*'
            TargetOriginId: StaticAssets
            ViewerProtocolPolicy: redirect-to-https
            AllowedMethods: [GET, HEAD]
            CachedMethods: [GET, HEAD]
            ForwardedValues:
              QueryString: false
            TTL:
              DefaultTTL: 86400
              MaxTTL: 31536000

  # CloudFront Origin Access Control
  CloudFrontOAC:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Name: !Sub 'OAC-${EnvironmentName}'
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4

  # DynamoDB Table for processed bill data
  BillDataTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub 'irish-utility-bills-${EnvironmentName}'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: userId
          AttributeType: S
        - AttributeName: billId
          AttributeType: S
      KeySchema:
        - AttributeName: userId
          KeyType: HASH
        - AttributeName: billId
          KeyType: RANGE
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES

  # API Gateway
  ApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub 'irish-utility-api-${EnvironmentName}'
      Description: 'API for Irish Utility Bill Processing System'
      EndpointConfiguration:
        Types: [REGIONAL]

  # API Gateway Resource (catch-all for Next.js routes)
  ApiResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: '{proxy+}'

  # API Gateway Method
  ApiMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref ApiResource
      HttpMethod: ANY
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NextJSFunction.Arn}/invocations'

  # API Gateway Method for root
  ApiMethodRoot:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !GetAtt ApiGateway.RootResourceId
      HttpMethod: ANY
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NextJSFunction.Arn}/invocations'

  # API Gateway Deployment
  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - ApiMethod
      - ApiMethodRoot
    Properties:
      RestApiId: !Ref ApiGateway
      StageName: !Ref EnvironmentName

  # Lambda Execution Role for Next.js Function
  NextJSLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 'NextJSLambdaRole-${EnvironmentName}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: NextJSLambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:Query
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                  - dynamodb:Scan
                Resource: !GetAtt BillDataTable.Arn
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                Resource: 
                  - !Sub '${UtilityBillsBucket}/users/*'
                  - !Sub '${StaticAssetsBucket}/*'

  # Next.js Lambda Function
  NextJSFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub 'irish-utility-nextjs-${EnvironmentName}'
      Runtime: nodejs20.x
      Handler: index.handler
      Role: !GetAtt NextJSLambdaRole.Arn
      Code:
        ZipFile: |
          exports.handler = async (event) => {
            return {
              statusCode: 200,
              body: JSON.stringify({message: 'NextJS function placeholder'}),
            };
          };
      Timeout: 30
      MemorySize: 1024
      Environment:
        Variables:
          DYNAMODB_TABLE: !Ref BillDataTable
          S3_BUCKET: !Ref UtilityBillsBucket
          ENVIRONMENT: !Ref EnvironmentName

  # Permission for API Gateway to invoke Lambda
  NextJSLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref NextJSFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/stages/${EnvironmentName}/*/ANY/*'

  # Permission for API Gateway to invoke Lambda (root)
  NextJSLambdaPermissionRoot:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref NextJSFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/stages/${EnvironmentName}/ANY/'

  # Lambda Execution Role for Bill Processor
  BillProcessorRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 'BillProcessorRole-${EnvironmentName}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: BillProcessorPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - bedrock:InvokeModel
                Resource: '*'
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                Resource: !GetAtt BillDataTable.Arn
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource: !Sub '${UtilityBillsBucket}/users/*'

  # Bill Processor Lambda Function
  BillProcessorFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub 'irish-utility-bill-processor-${EnvironmentName}'
      Runtime: nodejs20.x
      Handler: index.handler
      Role: !GetAtt BillProcessorRole.Arn
      Code:
        ZipFile: |
          exports.handler = async (event) => {
            console.log('Bill processor event:', JSON.stringify(event, null, 2));
            return { statusCode: 200, body: 'Bill processor placeholder' };
          };
      Timeout: 300
      MemorySize: 1024
      Environment:
        Variables:
          DYNAMODB_TABLE: !Ref BillDataTable
          BEDROCK_REGION: !Ref AWS::Region

  # Permission for S3 to invoke Bill Processor Lambda
  S3InvokeLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref BillProcessorFunction
      Action: lambda:InvokeFunction
      Principal: s3.amazonaws.com
      SourceArn: !GetAtt UtilityBillsBucket.Arn


Outputs:
  WebsiteURL:
    Description: 'Website URL'
    Value: !Sub 'https://${CloudFrontDistribution.DomainName}'
    
  ApiGatewayURL:
    Description: 'API Gateway URL'
    Value: !Sub 'https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${EnvironmentName}'
    
  S3BucketName:
    Description: 'S3 Bucket for utility bills'
    Value: !Ref UtilityBillsBucket
    
  StaticAssetsBucket:
    Description: 'S3 Bucket for static assets'
    Value: !Ref StaticAssetsBucket
    
  DynamoDBTable:
    Description: 'DynamoDB table for bill data'
    Value: !Ref BillDataTable